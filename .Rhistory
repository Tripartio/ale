ale_lm_attitude_simple <- ale(attitude, lm_attitude, boot_it = 0)
purrr::map(ale_lm_attitude_simple, \(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
ale_lm_attitude_simple[setdiff(names(ale_lm_attitude_simple), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
toc()
toc()
devtools::load_all(".")
tic()
# attitude dataset
help("attitude")
attitude
str(attitude)
summary(attitude)
# train an OLS model to predict average rating
lm_attitude <- lm(rating ~ ., data = attitude)
summary(lm_attitude)
# Visualize effects of model variables
ale_lm_attitude_simple <- ale(attitude, lm_attitude, boot_it = 0)
ale_lm_attitude_simple[setdiff(names(ale_lm_attitude_simple), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
# verify and visualize the possible existence of any interactions
ale_lm_attitude_ixn <- ale_ixn(attitude, lm_attitude, boot_it = 0)
# Skip .common_data when iterating through the data for plotting
ale_lm_attitude_ixn[setdiff(names(ale_lm_attitude_ixn), '.common_data')] |>
purrr::walk(\(x1) {  # extract list of x1 ALE outputs
purrr::map(x1, \(.x) .x$plot) |>  # for each x1, extract list of x2 ALE outputs
gridExtra::grid.arrange(grobs = _, ncol = 2)  # plot all x1 plots
})
## Full model bootstrapping
# To correctly format model_call_string from the call for the OLS regression:
# `lm(rating ~ ., data = attitude)`,
# remove the data argument and wrap that in a string: 'lm(rating ~ .)'
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)')
devtools::load_all(".")
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)')
ale_x
ale_n
boot_summary
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)')
devtools::load_all(".")
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)')
rlang::last_trace()
devtools::load_all(".")
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)')
devtools::load_all(".")
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)')
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)', boot_it = 3)
rlang::last_trace()
devtools::load_all(".")
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)', boot_it = 3)
boot_ale
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)', boot_it = 3)
View(boot_ale)
boot_ale[["complaints"]][[1]][["data"]]
devtools::load_all(".")
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)', boot_it = 3)
boot_ale[["complaints"]][[1]][["data"]]
devtools::load_all(".")
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)', boot_it = 3)
View(mb_lm)
mb_lm[["model_stats"]]
mb_lm[["model_coefs"]]
mb_lm[["ale_data"]][["complaints"]][["data"]]
devtools::load_all(".")
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)', boot_it = 3)
devtools::load_all(".")
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)', boot_it = 3)
boot_ale[["complaints"]][[1]][["data"]]
mb_lm[["ale_data"]][["complaints"]][["data"]]
# To correctly format model_call_string from the call for the OLS regression:
# `lm(rating ~ ., data = attitude)`,
# remove the data argument and wrap that in a string: 'lm(rating ~ .)'
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)')
mb_lm$model_stats
# Print bootstrapped model coefficients
mb_lm$model_coefs
# visualize the results of the ALE plots
mb_lm$ale_data[setdiff(names(mb_lm$ale_data), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
ale_gam_attitude_simple <- ale(attitude, gam_attitude, boot_it = 0)
ale_gam_attitude_simple[setdiff(names(ale_gam_attitude_simple), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
# Full model bootstrapping
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))'
)
mb_gam$model_stats
mb_gam$model_coefs
mb_gam$ale_data[setdiff(names(mb_gam$ale_data), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
toc()
toc()
tic()
# attitude dataset
help("attitude")
attitude
str(attitude)
summary(attitude)
# train an OLS model to predict average rating
lm_attitude <- lm(rating ~ ., data = attitude)
summary(lm_attitude)
# Visualize effects of model variables
ale_lm_attitude_simple <- ale(attitude, lm_attitude, boot_it = 0)
ale_lm_attitude_simple[setdiff(names(ale_lm_attitude_simple), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
# verify and visualize the possible existence of any interactions
ale_lm_attitude_ixn <- ale_ixn(attitude, lm_attitude, boot_it = 0)
# Skip .common_data when iterating through the data for plotting
ale_lm_attitude_ixn[setdiff(names(ale_lm_attitude_ixn), '.common_data')] |>
purrr::walk(\(x1) {  # extract list of x1 ALE outputs
purrr::map(x1, \(.x) .x$plot) |>  # for each x1, extract list of x2 ALE outputs
gridExtra::grid.arrange(grobs = _, ncol = 2)  # plot all x1 plots
})
## Full model bootstrapping
# To correctly format model_call_string from the call for the OLS regression:
# `lm(rating ~ ., data = attitude)`,
# remove the data argument and wrap that in a string: 'lm(rating ~ .)'
mb_lm <- model_bootstrap(attitude, 'lm(rating ~ .)')
# Print bootstrapped overall model statistics
mb_lm$model_stats
# Print bootstrapped model coefficients
mb_lm$model_coefs
# visualize the results of the ALE plots
mb_lm$ale_data[setdiff(names(mb_lm$ale_data), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
## ALE for general additive models (GAM)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
ale_gam_attitude_simple <- ale(attitude, gam_attitude, boot_it = 0)
ale_gam_attitude_simple[setdiff(names(ale_gam_attitude_simple), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
# Full model bootstrapping
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))'
)
mb_gam$model_stats
mb_gam$model_coefs
mb_gam$ale_data[setdiff(names(mb_gam$ale_data), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
toc()
toc()
toc()
tic()
# attitude dataset
attitude
## ALE for general additive models (GAM)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
# ale_gam_attitude_simple <- ale(attitude, gam_attitude, boot_it = 0)
#
# ale_gam_attitude_simple[setdiff(names(ale_gam_attitude_simple), '.common_data')] |>
#   purrr::map(\(.x) .x$plot) |>  # extract plots as a list
#   gridExtra::grid.arrange(grobs = _, ncol = 2)
# Full model bootstrapping
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))'
)
mb_gam$model_stats
mb_gam$model_coefs
mb_gam$ale_data[setdiff(names(mb_gam$ale_data), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
toc()
tic()
# attitude dataset
attitude
## ALE for general additive models (GAM)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
# ale_gam_attitude_simple <- ale(attitude, gam_attitude, boot_it = 0)
#
# ale_gam_attitude_simple[setdiff(names(ale_gam_attitude_simple), '.common_data')] |>
#   purrr::map(\(.x) .x$plot) |>  # extract plots as a list
#   gridExtra::grid.arrange(grobs = _, ncol = 2)
# Full model bootstrapping
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))',
boot_it = 10
)
toc()
tic()
# attitude dataset
attitude
## ALE for general additive models (GAM)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
# ale_gam_attitude_simple <- ale(attitude, gam_attitude, boot_it = 0)
#
# ale_gam_attitude_simple[setdiff(names(ale_gam_attitude_simple), '.common_data')] |>
#   purrr::map(\(.x) .x$plot) |>  # extract plots as a list
#   gridExtra::grid.arrange(grobs = _, ncol = 2)
# Full model bootstrapping
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))',
boot_it = 10
)
mb_gam$model_stats
mb_gam$model_coefs
mb_gam$ale_data[setdiff(names(mb_gam$ale_data), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
toc()
tic()
# attitude dataset
attitude
## ALE for general additive models (GAM)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
# ale_gam_attitude_simple <- ale(attitude, gam_attitude, boot_it = 0)
#
# ale_gam_attitude_simple[setdiff(names(ale_gam_attitude_simple), '.common_data')] |>
#   purrr::map(\(.x) .x$plot) |>  # extract plots as a list
#   gridExtra::grid.arrange(grobs = _, ncol = 2)
# Full model bootstrapping
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))',
boot_it = 5
)
mb_gam$model_stats
mb_gam$model_coefs
mb_gam$ale_data[setdiff(names(mb_gam$ale_data), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
toc()
mb_gam$ale_data[setdiff(names(mb_gam$ale_data), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
mb_gam$ale_data[setdiff(names(mb_gam$ale_data), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
toc()
tic()
# Sample 1000 rows from the diamonds dataset (for a simple example)diamonds
set.seed(0)
diamonds_sample <- diamonds[sample(nrow(diamonds), 1000), ]
# Split the dataset into training and test sets
# https://stackoverflow.com/a/54892459/2449926
set.seed(0)
train_test_split <- sample(
c(TRUE, FALSE), nrow(diamonds_sample), replace = TRUE, prob = c(0.8, 0.2)
)
diamonds_train <- diamonds_sample[train_test_split, ]
diamonds_test <- diamonds_sample[!train_test_split, ]
# Create a GAM model with flexible curves to predict diamond price
# Smooth all numeric variables and include all other variables
# Build model on training data, not on the full dataset.
gam_diamonds <- mgcv::gam(
price ~ s(carat) + s(depth) + s(table) + s(x) + s(y) + s(z) +
cut + color + clarity,
data = diamonds_train
)
summary(gam_diamonds)
# Simple ALE without bootstrapping
ale_gam_diamonds <- ale(diamonds_test, gam_diamonds)
# Plot the ALE data
# Skip .common_data when iterating through the data for plotting
ale_gam_diamonds[setdiff(names(ale_gam_diamonds), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
toc()
tic()
# Sample 1000 rows from the diamonds dataset (for a simple example)diamonds# Sample 1000 rows from the diamonds dataset (for a simple example)diamonds
set.seed(0)
diamonds_sample <- diamonds[sample(nrow(diamonds), 1000), ]
# Split the dataset into training and test sets
# https://stackoverflow.com/a/54892459/2449926
set.seed(0)
train_test_split <- sample(
c(TRUE, FALSE), nrow(diamonds_sample), replace = TRUE, prob = c(0.8, 0.2)
)
diamonds_train <- diamonds_sample[train_test_split, ]
diamonds_test <- diamonds_sample[!train_test_split, ]
# Create a GAM model with flexible curves to predict diamond price
# Smooth all numeric variables and include all other variables
# Build model on training data, not on the full dataset.
gam_diamonds <- mgcv::gam(
price ~ s(carat) + s(depth) + s(table) + s(x) + s(y) + s(z) +
cut + color + clarity,
data = diamonds_train
)
summary(gam_diamonds)
# ALE two-way interactions
ale_ixn_gam_diamonds <- ale_ixn(diamonds_test, gam_diamonds)
toc()
tic()
attitude dataset
tic()
# attitude dataset
attitude
## ALE for general additive models (GAM)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
# Full model bootstrapping
# Only 5 bootstrap iterations for a rapid example
# Increase value of boot_it for more realistic results
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))',
boot_it = 5
)
# Model statistics and coefficients
mb_gam$model_stats
mb_gam$model_coefs
toc()
tic()
# attitude dataset
attitude
## ALE for general additive models (GAM)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
# Full model bootstrapping
# Only 5 bootstrap iterations for a rapid example
# Increase value of boot_it for more realistic results
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))',
boot_it = 10
)
# Model statistics and coefficients
mb_gam$model_stats
mb_gam$model_coefs
toc()
tic()
# attitude dataset
attitude
## ALE for general additive models (GAM)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
# Full model bootstrapping
# Only 5 bootstrap iterations for a rapid example
# Increase value of boot_it for more realistic results
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))',
boot_it = 10
)
toc()
tic()
# attitude dataset
attitude
## ALE for general additive models (GAM)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
# Full model bootstrapping
# Only 5 bootstrap iterations for a rapid example
# Increase value of boot_it for more realistic results
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))',
boot_it = 5
)
# Model statistics and coefficients
mb_gam$model_stats
mb_gam$model_coefs
toc()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
attitude
## ALE for general additive models (GAM)
gam_attitude <- mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance),
data = attitude)
summary(gam_attitude)
# Full model bootstrapping
# Only 5 bootstrap iterations for a rapid example
# Increase value of boot_it for more realistic results
mb_gam <- model_bootstrap(
attitude,
'mgcv::gam(rating ~ s(complaints) + s(privileges) + s(learning) +
s(raises) + s(critical) + s(advance))',
boot_it = 5
)
# Model statistics and coefficients
mb_gam$model_stats
mb_gam$model_coefs
View(mb_gam)
mb_gam[["ale_data"]][["complaints"]][["data"]]
library(devtools)
library(usethis)
setwd(r'(S:\Dropbox\Travail\Research\ALE)')
load_all('ale')
setwd(r'(S:\Dropbox\Travail\Research\ALE)')
document('ale')
spell_check('ale')
#' Checklist
setwd(r'(S:\Dropbox\Travail\Research\ALE)')
document('ale')
spell_check('ale')
#'
#' * Update DESCRIPTION
#' * Update NEWS.md
#' * document('ale')
#' * spell_check('ale')
#' * Check the package
setwd(r'(S:\Dropbox\Travail\Research\ALE)')
check('ale', vignettes = FALSE)  # for quick checks
tic()
# Sample 1000 rows from the diamonds dataset (for a simple example)diamonds
set.seed(0)
diamonds_sample <- diamonds[sample(nrow(diamonds), 1000), ]
# Split the dataset into training and test sets
# https://stackoverflow.com/a/54892459/2449926
set.seed(0)
train_test_split <- sample(
c(TRUE, FALSE), nrow(diamonds_sample), replace = TRUE, prob = c(0.8, 0.2)
)
diamonds_train <- diamonds_sample[train_test_split, ]
diamonds_test <- diamonds_sample[!train_test_split, ]
# Create a GAM model with flexible curves to predict diamond price
# Smooth all numeric variables and include all other variables
# Build model on training data, not on the full dataset.
gam_diamonds <- mgcv::gam(
price ~ s(carat) + s(depth) + s(table) + s(x) + s(y) + s(z) +
cut + color + clarity,
data = diamonds_train
)
summary(gam_diamonds)
# Simple ALE without bootstrapping
ale_gam_diamonds <- ale(diamonds_test, gam_diamonds)
# Plot the ALE data
# Skip .common_data when iterating through the data for plotting
ale_gam_diamonds[setdiff(names(ale_gam_diamonds), '.common_data')] |>
purrr::map(\(.x) .x$plot) |>  # extract plots as a list
gridExtra::grid.arrange(grobs = _, ncol = 2)
toc()
tic()
# Sample 1000 rows from the diamonds dataset (for a simple example)diamonds
set.seed(0)
diamonds_sample <- diamonds[sample(nrow(diamonds), 1000), ]
# Split the dataset into training and test sets
# https://stackoverflow.com/a/54892459/2449926
set.seed(0)
train_test_split <- sample(
c(TRUE, FALSE), nrow(diamonds_sample), replace = TRUE, prob = c(0.8, 0.2)
)
diamonds_train <- diamonds_sample[train_test_split, ]
diamonds_test <- diamonds_sample[!train_test_split, ]
# Create a GAM model with flexible curves to predict diamond price
# Smooth all numeric variables and include all other variables
# Build model on training data, not on the full dataset.
gam_diamonds <- mgcv::gam(
price ~ s(carat) + s(depth) + s(table) + s(x) + s(y) + s(z) +
cut + color + clarity,
data = diamonds_train
)
summary(gam_diamonds)
# Simple ALE without bootstrapping
ale_gam_diamonds <- ale(diamonds_test, gam_diamonds)
toc()
document('ale')
spell_check('ale')
spell_check('ale')
setwd(r'(S:\Dropbox\Travail\Research\ALE)')
check('ale', vignettes = FALSE)  # for quick checks
check('ale')
setwd(r'(S:\Dropbox\Travail\Research\ALE)')
release('ale')
devtools::load_all("ale")
?ale
?model_bootstrap
usethis::create_github_token()
gitcreds::gitcreds_set()
